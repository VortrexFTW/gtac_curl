
#include "pch.h"
#include <stdio.h>
#include <stdlib.h>
#include <SDKHelper.h>

#include <curl.h>
#include <easy.h>

// The modules internal name (Also used for the namespace name)
MODULE_MAIN("curl");

SDK::Class g_CurlClass;
SDK::Class g_CurlMimeClass;
SDK::Class g_CurlMimePartClass;

class CCurl
{
	public:
		inline CCurl(CURL* pCurl) : m_pCurl() {
			m_pCurl = curl_easy_init();
		}
		
		inline ~CCurl() {
			Free();
		}

		CURL* m_pCurl;

		void Free();
};

class CCurlMime {
	public:
		inline CCurlMime(curl_mime* pCurlMime) : m_pCurlMime(CURL* pCurl) {
			m_pCurlMime = curl_mime_init(pCurl);
		}
		
		inline ~CCurlMime() {
			Free();
		}

		curl_mime* m_pCurlMime;
		
		void Free();
		void AddPart();
};

class CCurlMimePart {
	public:
		inline CCurlMimePart(curl_mimepart* pCurlMimePart) : m_pCurlMimePart(curl_mime* pCurlMime) {
			m_pCurlMimePart = curl_mime_addpart(pCurlMime);
		}
		
		inline ~CCurlMimePart() {
			
		}

		curl_mimepart* m_pCurlMimePart;
		
		void Data(const char*, size_t);
		void Name(const char*);
};

void CCurl::Free() {
	if(m_pCurl != nullptr) {
		curl_easy_cleanup(m_pCurl);
		m_pCurl = nullptr;
	}
}

void CCurlMime::Free() {
	if(m_pCurlMime != nullptr) {
		curl_mime_free(m_pCurlMime);
		m_pCurlMime = nullptr;
	}
}

void CCurlMime::AddPart() {
	if(m_pCurlMime != nullptr) {
		curl_mime_addpart(m_pCurlMime);
	}
}

void CCurlMimePart::Data(const char* szData, size_t iDataSize) {
	if(m_pCurlMimePart != nullptr) {
		curl_mime_data(m_pCurlMimePart, szData, iDataSize);
	}
}

void CCurlMimePart::Name(const char* szName) {
	if(m_pCurlMimePart != nullptr) {
		curl_mime_name(m_pCurlMimePart, szName);
	}
}

void ModuleRegister()
{
	g_CurlClass = SDK::Class("Curl");
	g_CurlMimeClass = SDK::Class("CurlMime");
	g_CurlMimePartClass = SDK::Class("CurlMimePart");
	
	// Unfinished!
	// This will eventually be a complete CURL wrapper.
	SDK::RegisterFunction("init", [](Galactic3D::Interfaces::INativeState* pState, int32_t argc, void* pUser) {
		SDK_TRY;

		SDK::State State(pState);
		
		pCurl = curl_easy_init();
		
		SDK::ClassValue<CCurl, g_CurlClass> Value(new CCurl(pCurl));	

		return true;

		SDK_ENDTRY;
	});
	
	g_CurlClass.RegisterFunction("mime", [](Galactic3D::Interfaces::INativeState* pState, int32_t argc, void* pUser) {
		SDK_TRY;

		SDK::State State(pState);

		auto pThis = State.CheckThis<CCurl, g_CurlClass>();
		CURL* pCurl = pThis->m_pCurl;

		pCurlMime = curl_mime_init(pCurl);
		SDK::ClassValue<CCurlMime, g_CurlMimeClass> Value(new CCurlMime(pCurlMime));	
		return true;

		SDK_ENDTRY;
	});
	
	g_CurlMimeClass.RegisterFunction("part", [](Galactic3D::Interfaces::INativeState* pState, int32_t argc, void* pUser) {
		SDK_TRY;

		SDK::State State(pState);

		auto pThis = State.CheckThis<CCurlMime, g_CurlMimeClass>();
		curl_mime* pCurlMime = pThis->m_pCurlMime;

		pCurlMimePart = curl_mime_addpart(pCurlMime);
		SDK::ClassValue<CCurlMimePart, g_CurlMimePartClass> Value(new CCurlMimePart(pCurlMimePart));	
		return true;

		SDK_ENDTRY;
	});
	
	g_CurlMimePartClass.RegisterFunction("data", [](Galactic3D::Interfaces::INativeState* pState, int32_t argc, void* pUser) {
		SDK_TRY;

		SDK::State State(pState);

		auto pThis = State.CheckThis<CCurlMime, g_CurlMimeClass>();
		curl_mimepart* pCurlMimePart = pThis->m_pCurlMimePart;
		
		const char* szData = State.CheckString(0);
		
		size_t iDataSize;
		State.CheckNumber(1, iDataSize);			

		curl_mime_data(pCurlMimePart, szData, iDataSize);
		return true;

		SDK_ENDTRY;
	});

	g_CurlMimePartClass.RegisterFunction("name", [](Galactic3D::Interfaces::INativeState* pState, int32_t argc, void* pUser) {
		SDK_TRY;

		SDK::State State(pState);

		auto pThis = State.CheckThis<CCurlMime, g_CurlMimeClass>();
		curl_mimepart* pCurlMimePart = pThis->m_pCurlMimePart;
		
		const char* szName = State.CheckString(0);

		curl_mime_name(pCurlMimePart, szName);
		return true;

		SDK_ENDTRY;
	});			

	g_CurlClass.RegisterFunction("setOpt", [](Galactic3D::Interfaces::INativeState* pState, int32_t argc, void* pUser) {
		SDK_TRY;

		SDK::State State(pState);
		
		int iValueIndex = 1;

		auto pThis = State.CheckThis<CCurl, g_CurlClass>();
		CURL* pCurl = pThis->pCurl;
		
		int iOptID;
		State.CheckNumber(0, iOptID);	

		auto pValue = NULL;
		
		switch(iOptID) {
			case CURLOPT_ABSTRACT_UNIX_SOCKET:
			case CURLOPT_ACCEPT_ENCODING:
			case CURLOPT_ALTSVC:
			case CURLOPT_CAINFO:
			case CURLOPT_CAPATH:
			case CURLOPT_COOKIE:
			case CURLOPT_COOKIEFILE:
			case CURLOPT_COOKIEJAR:
			case CURLOPT_COOKIELIST:
			case CURLOPT_COPYPOSTFIELDS:
			case CURLOPT_CRLFILE:
			case CURLOPT_CUSTOMREQUEST:
			case CURLOPT_DEFAULT_PROTOCOL:
			case CURLOPT_DNS_INTERFACE:
			case CURLOPT_DNS_LOCAL_IP4:
			case CURLOPT_DNS_LOCAL_IP6:
			case CURLOPT_DNS_SERVERS:
			case CURLOPT_DOH_URL:
			case CURLOPT_EGDSOCKET:
			case CURLOPT_ERRORBUFFER:
			case CURLOPT_FTPPORT:
			case CURLOPT_FTP_ACCOUNT:
			case CURLOPT_FTP_ALTERNATIVE_TO_USER:
			case CURLOPT_INTERFACE:
			case CURLOPT_ISSUERCERT:
			case CURLOPT_KEYPASSWD:
			case CURLOPT_KRBLEVEL:
			case CURLOPT_LOGIN_OPTIONS:
			case CURLOPT_MAIL_AUTH:
			case CURLOPT_MAIL_FROM:
			case CURLOPT_NETRC_FILE:
			case CURLOPT_NOPROXY:
			case CURLOPT_PASSWORD:
			case CURLOPT_PINNEDPUBLICKEY:
			case CURLOPT_POSTFIELDS:
			case CURLOPT_PRE_PROXY:
			case CURLOPT_PROXY:
			case CURLOPT_PROXYUSERNAME:
			case CURLOPT_PROXYUSERPWD:
			case CURLOPT_PROXY_CAINFO:
			case CURLOPT_PROXY_CAPATH:
			case CURLOPT_PROXY_CRLFILE:
			case CURLOPT_PROXY_KEYPASSWD:
			case CURLOPT_PROXY_PINNEDPUBLICKEY:
			case CURLOPT_PROXY_SERVICE_NAME:
			case CURLOPT_PROXY_SSLCERT:
			case CURLOPT_PROXY_SSLCERTTYPE:
			case CURLOPT_PROXY_SSLKEY:
			case CURLOPT_PROXY_SSLKEYTYPE:
			case CURLOPT_PROXY_SSL_CIPHER_LIST:
			case CURLOPT_PROXY_TLS13_CIPHERS:
			case CURLOPT_PROXY_TLSAUTH_PASSWORD:
			case CURLOPT_PROXY_TLSAUTH_TYPE:
			case CURLOPT_PROXY_TLSAUTH_USERNAME:
			case CURLOPT_RANDOM_FILE:
			case CURLOPT_RANGE:
			case CURLOPT_REFERER:
			case CURLOPT_REQUEST_TARGET:
			case CURLOPT_RTSP_SESSION_ID:
			case CURLOPT_RTSP_STREAM_URI:
			case CURLOPT_RTSP_TRANSPORT:
			case CURLOPT_SASL_AUTHZID:
			case CURLOPT_SERVICE_NAME:
			case CURLOPT_SOCKS5_GSSAPI_SERVICE:
			case CURLOPT_SSH_HOST_PUBLIC_KEY_MD5:
			case CURLOPT_SSH_KNOWNHOSTS:
			case CURLOPT_SSH_PRIVATE_KEYFILE:
			case CURLOPT_SSH_PUBLIC_KEYFILE:
			case CURLOPT_SSLCERT:case CURLOPT_SSLCERTTYPE:
			case CURLOPT_SSLENGINE:
			case CURLOPT_SSLKEY:
			case CURLOPT_SSLKEYTYPE:
			case CURLOPT_SSL_CIPHER_LIST:
			case CURLOPT_TLS13_CIPHERS:
			case CURLOPT_TLSAUTH_PASSWORD:
			case CURLOPT_TLSAUTH_TYPE:
			case CURLOPT_TLSAUTH_USERNAME:
			case CURLOPT_UNIX_SOCKET_PATH:
			case CURLOPT_URL:
			case CURLOPT_USERAGENT:
			case CURLOPT_USERNAME:
			case CURLOPT_USERPWD:
			case CURLOPT_XOAUTH2_BEARER: {
					pValue = State.CheckString(iValueIndex);
				}
				break;
				
			case CURLOPT_STREAM_DEPENDS:
			case CURLOPT_STREAM_DEPENDS_E: {
					CURL* pValue = State.CheckClass(iValueIndex, g_CurlClass);
				}
				break;
				
			case CURLOPT_SHARE: {
					// Curl Shares (CURLSH)
					// CURLSH* pValue;
					pValue = NULL;
				}
				break;
				
			case CURLOPT_TIMEVALUE_LARGE:
			case CURLOPT_INFILESIZE_LARGE:
			case CURLOPT_MAXFILESIZE_LARGE:
			case CURLOPT_MAX_RECV_SPEED_LARGE:
			case CURLOPT_MAX_SEND_SPEED_LARGE:
			case CURLOPT_POSTFIELDSIZE_LARGE:
			case CURLOPT_RESUME_FROM_LARGE: {
					State.CheckNumber(iValueIndex, pValue);
				}
				break;
				
			case CURLOPT_STDERR:
				// File
				// Maybe use CheckStream for this?
				pValue = NULL;
				break;
				
			case CURLOPT_CHUNK_BGN_FUNCTION:
			case CURLOPT_CHUNK_END_FUNCTION:
			case CURLOPT_CLOSESOCKETFUNCTION:
			case CURLOPT_CONV_FROM_NETWORK_FUNCTION:
			case CURLOPT_CONV_FROM_UTF8_FUNCTION:
			case CURLOPT_CONV_TO_NETWORK_FUNCTION:
			case CURLOPT_DEBUGFUNCTION:
			case CURLOPT_FNMATCH_FUNCTION:
			case CURLOPT_HEADERFUNCTION:
			case CURLOPT_INTERLEAVEFUNCTION:
			case CURLOPT_IOCTLFUNCTION:
			case CURLOPT_OPENSOCKETFUNCTION:
			case CURLOPT_READFUNCTION:
			case CURLOPT_RESOLVER_START_FUNCTION:
			case CURLOPT_SEEKFUNCTION:
			case CURLOPT_SOCKOPTFUNCTION:
			case CURLOPT_SSH_KEYFUNCTION:
			case CURLOPT_TRAILERFUNCTION:
			case CURLOPT_WRITEFUNCTION:
			case CURLOPT_XFERINFOFUNCTION:
			case CURLOPT_PROGRESSFUNCTION:
			case CURLOPT_SSL_CTX_FUNCTION: {
					// Functions
					State.CheckFunction(iValueIndex, pValue);
				}
				break;
				
			case CURLOPT_PORT:
			case CURLOPT_CONNECTTIMEOUT:
			case CURLOPT_WILDCARDMATCH:
			case CURLOPT_ACCEPTTIMEOUT_MS:
			case CURLOPT_ADDRESS_SCOPE:
			case CURLOPT_ALTSVC_CTRL:
			case CURLOPT_APPEND:
			case CURLOPT_AUTOREFERER:
			case CURLOPT_BUFFERSIZE:
			case CURLOPT_CERTINFO:
			case CURLOPT_CONNECTTIMEOUT_MS:
			case CURLOPT_CONNECT_ONLY:
			case CURLOPT_CONNECT_TO:
			case CURLOPT_COOKIESESSION:
			case CURLOPT_CRLF:
			case CURLOPT_DIRLISTONLY:
			case CURLOPT_DISALLOW_USERNAME_IN_URL:
			case CURLOPT_DNS_CACHE_TIMEOUT:
			case CURLOPT_DNS_SHUFFLE_ADDRESSES:
			case CURLOPT_DNS_USE_GLOBAL_CACHE:
			case CURLOPT_EXPECT_100_TIMEOUT_MS:
			case CURLOPT_FAILONERROR:
			case CURLOPT_FILETIME:
			case CURLOPT_FOLLOWLOCATION:
			case CURLOPT_FORBID_REUSE:
			case CURLOPT_FRESH_CONNECT:
			case CURLOPT_FTPSSLAUTH:
			case CURLOPT_FTP_CREATE_MISSING_DIRS:
			case CURLOPT_FTP_FILEMETHOD:
			case CURLOPT_FTP_RESPONSE_TIMEOUT:
			case CURLOPT_FTP_SKIP_PASV_IP:
			case CURLOPT_FTP_SSL_CCC:
			case CURLOPT_FTP_USE_EPRT:
			case CURLOPT_FTP_USE_EPSV:
			case CURLOPT_FTP_USE_PRET:
			case CURLOPT_GSSAPI_DELEGATION:
			case CURLOPT_HAPPY_EYEBALLS_TIMEOUT_MS:
			case CURLOPT_HAPROXYPROTOCOL:
			case CURLOPT_HEADER:
			case CURLOPT_HTTP09_ALLOWED:
			case CURLOPT_HTTPAUTH:
			case CURLOPT_HTTPGET:
			case CURLOPT_HTTPPROXYTUNNEL:
			case CURLOPT_HTTP_CONTENT_DECODING:
			case CURLOPT_HTTP_TRANSFER_DECODING:
			case CURLOPT_HTTP_VERSION:
			case CURLOPT_IGNORE_CONTENT_LENGTH:
			case CURLOPT_INFILESIZE:
			case CURLOPT_IPRESOLVE:
			case CURLOPT_KEEP_SENDING_ON_ERROR:
			case CURLOPT_LOCALPORT:
			case CURLOPT_LOCALPORTRANGE:
			case CURLOPT_LOW_SPEED_LIMIT:
			case CURLOPT_LOW_SPEED_TIME:
			case CURLOPT_MAXAGE_CONN:
			case CURLOPT_MAXCONNECTS:
			case CURLOPT_MAXFILESIZE:
			case CURLOPT_MAXREDIRS:
			case CURLOPT_NETRC:
			case CURLOPT_NEW_DIRECTORY_PERMS:
			case CURLOPT_NEW_FILE_PERMS:
			case CURLOPT_NOBODY:
			case CURLOPT_NOPROGRESS:
			case CURLOPT_NOSIGNAL:
			case CURLOPT_PATH_AS_IS:
			case CURLOPT_PIPEWAIT:
			case CURLOPT_POST:
			case CURLOPT_POSTFIELDSIZE:
			case CURLOPT_POSTREDIR:
			case CURLOPT_PROTOCOLS:
			case CURLOPT_PROXYAUTH:
			case CURLOPT_PROXYPASSWORD:
			case CURLOPT_PROXYPORT:
			case CURLOPT_PROXYTYPE:
			case CURLOPT_PROXY_SSLVERSION:
			case CURLOPT_PROXY_SSL_OPTIONS:
			case CURLOPT_PROXY_SSL_VERIFYHOST:
			case CURLOPT_PROXY_SSL_VERIFYPEER:
			case CURLOPT_PROXY_TRANSFER_MODE:
			case CURLOPT_PUT:
			case CURLOPT_REDIR_PROTOCOLS:
			case CURLOPT_RESUME_FROM:
			case CURLOPT_RTSP_CLIENT_CSEQ:
			case CURLOPT_RTSP_REQUEST:
			case CURLOPT_RTSP_SERVER_CSEQ:
			case CURLOPT_SASL_IR:
			case CURLOPT_SOCKS5_AUTH:
			case CURLOPT_SOCKS5_GSSAPI_NEC:
			case CURLOPT_SSH_AUTH_TYPES:
			case CURLOPT_SSH_COMPRESSION:
			case CURLOPT_SSLENGINE_DEFAULT:
			case CURLOPT_SSLVERSION:
			case CURLOPT_SSL_ENABLE_ALPN:
			case CURLOPT_SSL_ENABLE_NPN:
			case CURLOPT_SSL_FALSESTART:
			case CURLOPT_SSL_OPTIONS:
			case CURLOPT_SSL_SESSIONID_CACHE:
			case CURLOPT_SSL_VERIFYHOST:
			case CURLOPT_SSL_VERIFYPEER:
			case CURLOPT_SSL_VERIFYSTATUS:
			case CURLOPT_STREAM_WEIGHT:
			case CURLOPT_SUPPRESS_CONNECT_HEADERS:
			case CURLOPT_TCP_FASTOPEN:
			case CURLOPT_TCP_KEEPALIVE:
			case CURLOPT_TCP_KEEPIDLE:
			case CURLOPT_TCP_KEEPINTVL:
			case CURLOPT_TCP_NODELAY:
			case CURLOPT_TFTP_BLKSIZE:
			case CURLOPT_TFTP_NO_OPTIONS:
			case CURLOPT_TIMECONDITION:
			case CURLOPT_TIMEOUT:
			case CURLOPT_TIMEOUT_MS:
			case CURLOPT_TIMEVALUE:
			case CURLOPT_TRANSFERTEXT:
			case CURLOPT_TRANSFER_ENCODING:
			case CURLOPT_UNRESTRICTED_AUTH:
			case CURLOPT_UPKEEP_INTERVAL_MS:
			case CURLOPT_UPLOAD:
			case CURLOPT_UPLOAD_BUFFERSIZE:
			case CURLOPT_USE_SSL:
			case CURLOPT_VERBOSE: {
					State.CheckNumber(iValueIndex, pValue);
				}
				break;
				
			case CURLOPT_MIMEPOST: {
					// Mime (via curl_mime_init)
					State.CheckClass(g_CurlMimeClass, iValueIndex, false, pValue);
				}
				break;
				
			case CURLOPT_CHUNK_DATA:
			case CURLOPT_CLOSESOCKETDATA:
			case CURLOPT_WRITEDATA:
			case CURLOPT_XFERINFODATA: {
					// Pointer
					pValue = NULL;
				}
				break;
				
			case CURLOPT_HTTPPOST: {
					// Struct (curl_httppost)
					// curl_httppost* pValue;
					pValue = NULL;
				}
				break;
				
			case CURLOPT_HTTP200ALIASES:
			case CURLOPT_MAIL_RCPT:
			case CURLOPT_POSTQUOTE:
			case CURLOPT_PREQUOTE:
			case CURLOPT_PROXYHEADER:
			case CURLOPT_TELNETOPTIONS:
			case CURLOPT_HTTPHEADER:
			case CURLOPT_QUOTE:
			case CURLOPT_RESOLVE: {
					// Struct (curl_slist)
					// curl_slist* pValue;
					pValue = NULL;
				}
				break;
				
			case CURLOPT_CURLU:
			case CURLOPT_DEBUGDATA:
			case CURLOPT_FNMATCH_DATA:
			case CURLOPT_SEEKDATA:
			case CURLOPT_SOCKOPTDATA:
			case CURLOPT_SSH_KEYDATA:
			case CURLOPT_SSL_CTX_DATA:
			case CURLOPT_TRAILERDATA:
			case CURLOPT_HEADERDATA:
			case CURLOPT_INTERLEAVEDATA:
			case CURLOPT_IOCTLDATA:
			case CURLOPT_OPENSOCKETDATA:
			case CURLOPT_PRIVATE:
			case CURLOPT_PROGRESSDATA:
			case CURLOPT_READDATA:
			case CURLOPT_RESOLVER_START_DATA:
			case CURLOPT_HEADEROPT: {
					// Unknown (void)
					pValue = NULL;
				}
				break;		
		};

		if(pValue != NULL) {
			curl_easy_setopt(pCurl, iOptID, pValue);
		}
		
		return true;

		SDK_ENDTRY;
	});
	
	g_CurlClass.RegisterFunction("perform", [](Galactic3D::Interfaces::INativeState* pState, int32_t argc, void* pUser) {
		SDK_TRY;

		SDK::State State(pState);

		auto pThis = State.CheckThis<CCurl, g_CurlClass>();
		CURL* pCurlPtr = pThis->pCurl;

		curl_easy_perform(pCurlPtr);
		return true;

		SDK_ENDTRY;
	});	
	
	g_CurlClass.RegisterFunction("reset", [](Galactic3D::Interfaces::INativeState* pState, int32_t argc, void* pUser) {
		SDK_TRY;

		SDK::State State(pState);

		auto pThis = State.CheckThis<CCurl, g_CurlClass>();
		CURL* pCurl = pThis->pCurl;

		curl_easy_reset(pCurl);
		return true;

		SDK_ENDTRY;
	});

	g_CurlClass.RegisterFunction("getInfo", [](Galactic3D::Interfaces::INativeState* pState, int32_t argc, void* pUser) {
		SDK_TRY;

		SDK::State State(pState);

		auto pThis = State.CheckThis<CCurl, g_CurlClass>();
		CURL* pCurl = pThis->pCurl;
		
		int iInfoID;
		State.CheckNumber(0, iInfoID);
		
		CURLINFO pCurlInfo = iInfoID;
		
		template pReturnValue;

		curl_easy_getinfo(pThis, pCurlInfo, pReturnValue);
		
		switch(pReturnValue)
		{
			case typeid(uint32_t):
				break;
				{
					SDK::NumberValue Value(pReturnValue));
					State.Return(Value);
				}
				break;

			case typeid(const char):
			case typeid(char):
			default:
				{
					SDK::StringValue Value(pReturnValue);
					State.Return(Value);	
					
				}
				break;
		}	
		return true;

		SDK_ENDTRY;
	});

	SDK::Define("CURLOPT_ABSTRACT_UNIX_SOCKET", CURLOPT_ABSTRACT_UNIX_SOCKET);
	SDK::Define("CURLOPT_ACCEPTTIMEOUT_MS", CURLOPT_ACCEPTTIMEOUT_MS);
	SDK::Define("CURLOPT_ACCEPT_ENCODING", CURLOPT_ACCEPT_ENCODING);
	SDK::Define("CURLOPT_ADDRESS_SCOPE", CURLOPT_ADDRESS_SCOPE);
	SDK::Define("CURLOPT_ALTSVC", CURLOPT_ALTSVC);
	SDK::Define("CURLOPT_ALTSVC_CTRL", CURLOPT_ALTSVC_CTRL);
	SDK::Define("CURLOPT_APPEND", CURLOPT_APPEND);
	SDK::Define("CURLOPT_AUTOREFERER", CURLOPT_AUTOREFERER);
	SDK::Define("CURLOPT_BUFFERSIZE", CURLOPT_BUFFERSIZE);
	SDK::Define("CURLOPT_CAINFO", CURLOPT_CAINFO);
	SDK::Define("CURLOPT_CAPATH", CURLOPT_CAPATH);
	SDK::Define("CURLOPT_CERTINFO", CURLOPT_CERTINFO);
	SDK::Define("CURLOPT_CHUNK_BGN_FUNCTION", CURLOPT_CHUNK_BGN_FUNCTION);
	SDK::Define("CURLOPT_CHUNK_DATA", CURLOPT_CHUNK_DATA);
	SDK::Define("CURLOPT_CHUNK_END_FUNCTION", CURLOPT_CHUNK_END_FUNCTION);
	SDK::Define("CURLOPT_CLOSESOCKETDATA", CURLOPT_CLOSESOCKETDATA);
	SDK::Define("CURLOPT_CLOSESOCKETFUNCTION", CURLOPT_CLOSESOCKETFUNCTION);
	SDK::Define("CURLOPT_CONNECTTIMEOUT", CURLOPT_CONNECTTIMEOUT);
	SDK::Define("CURLOPT_CONNECTTIMEOUT_MS", CURLOPT_CONNECTTIMEOUT_MS);
	SDK::Define("CURLOPT_CONNECT_ONLY", CURLOPT_CONNECT_ONLY);
	SDK::Define("CURLOPT_CONNECT_TO", CURLOPT_CONNECT_TO);
	SDK::Define("CURLOPT_CONV_FROM_NETWORK_FUNCTION", CURLOPT_CONV_FROM_NETWORK_FUNCTION);
	SDK::Define("CURLOPT_CONV_FROM_UTF8_FUNCTION", CURLOPT_CONV_FROM_UTF8_FUNCTION);
	SDK::Define("CURLOPT_CONV_TO_NETWORK_FUNCTION", CURLOPT_CONV_TO_NETWORK_FUNCTION);
	SDK::Define("CURLOPT_COOKIE", CURLOPT_COOKIE);
	SDK::Define("CURLOPT_COOKIEFILE", CURLOPT_COOKIEFILE);
	SDK::Define("CURLOPT_COOKIEJAR", CURLOPT_COOKIEJAR);
	SDK::Define("CURLOPT_COOKIELIST", CURLOPT_COOKIELIST);
	SDK::Define("CURLOPT_COOKIESESSION", CURLOPT_COOKIESESSION);
	SDK::Define("CURLOPT_COPYPOSTFIELDS", CURLOPT_COPYPOSTFIELDS);
	SDK::Define("CURLOPT_CRLF", CURLOPT_CRLF);
	SDK::Define("CURLOPT_CRLFILE", CURLOPT_CRLFILE);
	SDK::Define("CURLOPT_CURLU", CURLOPT_CURLU);
	SDK::Define("CURLOPT_CUSTOMREQUEST", CURLOPT_CUSTOMREQUEST);
	SDK::Define("CURLOPT_DEBUGDATA", CURLOPT_DEBUGDATA);
	SDK::Define("CURLOPT_DEBUGFUNCTION", CURLOPT_DEBUGFUNCTION);
	SDK::Define("CURLOPT_DEFAULT_PROTOCOL", CURLOPT_DEFAULT_PROTOCOL);
	SDK::Define("CURLOPT_DIRLISTONLY", CURLOPT_DIRLISTONLY);
	SDK::Define("CURLOPT_DISALLOW_USERNAME_IN_URL", CURLOPT_DISALLOW_USERNAME_IN_URL);
	SDK::Define("CURLOPT_DNS_CACHE_TIMEOUT", CURLOPT_DNS_CACHE_TIMEOUT);
	SDK::Define("CURLOPT_DNS_INTERFACE", CURLOPT_DNS_INTERFACE);
	SDK::Define("CURLOPT_DNS_LOCAL_IP4", CURLOPT_DNS_LOCAL_IP4);
	SDK::Define("CURLOPT_DNS_LOCAL_IP6", CURLOPT_DNS_LOCAL_IP6);
	SDK::Define("CURLOPT_DNS_SERVERS", CURLOPT_DNS_SERVERS);
	SDK::Define("CURLOPT_DNS_SHUFFLE_ADDRESSES", CURLOPT_DNS_SHUFFLE_ADDRESSES);
	SDK::Define("CURLOPT_DNS_USE_GLOBAL_CACHE", CURLOPT_DNS_USE_GLOBAL_CACHE);
	SDK::Define("CURLOPT_DOH_URL", CURLOPT_DOH_URL);
	SDK::Define("CURLOPT_EGDSOCKET", CURLOPT_EGDSOCKET);
	SDK::Define("CURLOPT_ERRORBUFFER", CURLOPT_ERRORBUFFER);
	SDK::Define("CURLOPT_EXPECT_100_TIMEOUT_MS", CURLOPT_EXPECT_100_TIMEOUT_MS);
	SDK::Define("CURLOPT_FAILONERROR", CURLOPT_FAILONERROR);
	SDK::Define("CURLOPT_FILETIME", CURLOPT_FILETIME);
	SDK::Define("CURLOPT_FNMATCH_DATA", CURLOPT_FNMATCH_DATA);
	SDK::Define("CURLOPT_FNMATCH_FUNCTION", CURLOPT_FNMATCH_FUNCTION);
	SDK::Define("CURLOPT_FOLLOWLOCATION", CURLOPT_FOLLOWLOCATION);
	SDK::Define("CURLOPT_FORBID_REUSE", CURLOPT_FORBID_REUSE);
	SDK::Define("CURLOPT_FRESH_CONNECT", CURLOPT_FRESH_CONNECT);
	SDK::Define("CURLOPT_FTPPORT", CURLOPT_FTPPORT);
	SDK::Define("CURLOPT_FTPSSLAUTH", CURLOPT_FTPSSLAUTH);
	SDK::Define("CURLOPT_FTP_ACCOUNT", CURLOPT_FTP_ACCOUNT);
	SDK::Define("CURLOPT_FTP_ALTERNATIVE_TO_USER", CURLOPT_FTP_ALTERNATIVE_TO_USER);
	SDK::Define("CURLOPT_FTP_CREATE_MISSING_DIRS", CURLOPT_FTP_CREATE_MISSING_DIRS);
	SDK::Define("CURLOPT_FTP_FILEMETHOD", CURLOPT_FTP_FILEMETHOD);
	SDK::Define("CURLOPT_FTP_RESPONSE_TIMEOUT", CURLOPT_FTP_RESPONSE_TIMEOUT);
	SDK::Define("CURLOPT_FTP_SKIP_PASV_IP", CURLOPT_FTP_SKIP_PASV_IP);
	SDK::Define("CURLOPT_FTP_SSL_CCC", CURLOPT_FTP_SSL_CCC);
	SDK::Define("CURLOPT_FTP_USE_EPRT", CURLOPT_FTP_USE_EPRT);
	SDK::Define("CURLOPT_FTP_USE_EPSV", CURLOPT_FTP_USE_EPSV);
	SDK::Define("CURLOPT_FTP_USE_PRET", CURLOPT_FTP_USE_PRET);
	SDK::Define("CURLOPT_GSSAPI_DELEGATION", CURLOPT_GSSAPI_DELEGATION);
	SDK::Define("CURLOPT_HAPPY_EYEBALLS_TIMEOUT_MS", CURLOPT_HAPPY_EYEBALLS_TIMEOUT_MS);
	SDK::Define("CURLOPT_HAPROXYPROTOCOL", CURLOPT_HAPROXYPROTOCOL);
	SDK::Define("CURLOPT_HEADER", CURLOPT_HEADER);
	SDK::Define("CURLOPT_HEADERDATA", CURLOPT_HEADERDATA);
	SDK::Define("CURLOPT_HEADERFUNCTION", CURLOPT_HEADERFUNCTION);
	SDK::Define("CURLOPT_HEADEROPT", CURLOPT_HEADEROPT);
	SDK::Define("CURLOPT_HTTP09_ALLOWED", CURLOPT_HTTP09_ALLOWED);
	SDK::Define("CURLOPT_HTTP200ALIASES", CURLOPT_HTTP200ALIASES);
	SDK::Define("CURLOPT_HTTPAUTH", CURLOPT_HTTPAUTH);
	SDK::Define("CURLOPT_HTTPGET", CURLOPT_HTTPGET);
	SDK::Define("CURLOPT_HTTPHEADER", CURLOPT_HTTPHEADER);
	SDK::Define("CURLOPT_HTTPPOST", CURLOPT_HTTPPOST);
	SDK::Define("CURLOPT_HTTPPROXYTUNNEL", CURLOPT_HTTPPROXYTUNNEL);
	SDK::Define("CURLOPT_HTTP_CONTENT_DECODING", CURLOPT_HTTP_CONTENT_DECODING);
	SDK::Define("CURLOPT_HTTP_TRANSFER_DECODING", CURLOPT_HTTP_TRANSFER_DECODING);
	SDK::Define("CURLOPT_HTTP_VERSION", CURLOPT_HTTP_VERSION);
	SDK::Define("CURLOPT_IGNORE_CONTENT_LENGTH", CURLOPT_IGNORE_CONTENT_LENGTH);
	SDK::Define("CURLOPT_INFILESIZE", CURLOPT_INFILESIZE);
	SDK::Define("CURLOPT_INFILESIZE_LARGE", CURLOPT_INFILESIZE_LARGE);
	SDK::Define("CURLOPT_INTERFACE", CURLOPT_INTERFACE);
	SDK::Define("CURLOPT_INTERLEAVEDATA", CURLOPT_INTERLEAVEDATA);
	SDK::Define("CURLOPT_INTERLEAVEFUNCTION", CURLOPT_INTERLEAVEFUNCTION);
	SDK::Define("CURLOPT_IOCTLDATA", CURLOPT_IOCTLDATA);
	SDK::Define("CURLOPT_IOCTLFUNCTION", CURLOPT_IOCTLFUNCTION);
	SDK::Define("CURLOPT_IPRESOLVE", CURLOPT_IPRESOLVE);
	SDK::Define("CURLOPT_ISSUERCERT", CURLOPT_ISSUERCERT);
	SDK::Define("CURLOPT_KEEP_SENDING_ON_ERROR", CURLOPT_KEEP_SENDING_ON_ERROR);
	SDK::Define("CURLOPT_KEYPASSWD", CURLOPT_KEYPASSWD);
	SDK::Define("CURLOPT_KRBLEVEL", CURLOPT_KRBLEVEL);
	SDK::Define("CURLOPT_LOCALPORT", CURLOPT_LOCALPORT);
	SDK::Define("CURLOPT_LOCALPORTRANGE", CURLOPT_LOCALPORTRANGE);
	SDK::Define("CURLOPT_LOGIN_OPTIONS", CURLOPT_LOGIN_OPTIONS);
	SDK::Define("CURLOPT_LOW_SPEED_LIMIT", CURLOPT_LOW_SPEED_LIMIT);
	SDK::Define("CURLOPT_LOW_SPEED_TIME", CURLOPT_LOW_SPEED_TIME);
	SDK::Define("CURLOPT_MAIL_AUTH", CURLOPT_MAIL_AUTH);
	SDK::Define("CURLOPT_MAIL_FROM", CURLOPT_MAIL_FROM);
	SDK::Define("CURLOPT_MAIL_RCPT", CURLOPT_MAIL_RCPT);
	SDK::Define("CURLOPT_MAXAGE_CONN", CURLOPT_MAXAGE_CONN);
	SDK::Define("CURLOPT_MAXCONNECTS", CURLOPT_MAXCONNECTS);
	SDK::Define("CURLOPT_MAXFILESIZE", CURLOPT_MAXFILESIZE);
	SDK::Define("CURLOPT_MAXFILESIZE_LARGE", CURLOPT_MAXFILESIZE_LARGE);
	SDK::Define("CURLOPT_MAXREDIRS", CURLOPT_MAXREDIRS);
	SDK::Define("CURLOPT_MAX_RECV_SPEED_LARGE", CURLOPT_MAX_RECV_SPEED_LARGE);
	SDK::Define("CURLOPT_MAX_SEND_SPEED_LARGE", CURLOPT_MAX_SEND_SPEED_LARGE);
	SDK::Define("CURLOPT_MIMEPOST", CURLOPT_MIMEPOST);
	SDK::Define("CURLOPT_NETRC", CURLOPT_NETRC);
	SDK::Define("CURLOPT_NETRC_FILE", CURLOPT_NETRC_FILE);
	SDK::Define("CURLOPT_NEW_DIRECTORY_PERMS", CURLOPT_NEW_DIRECTORY_PERMS);
	SDK::Define("CURLOPT_NEW_FILE_PERMS", CURLOPT_NEW_FILE_PERMS);
	SDK::Define("CURLOPT_NOBODY", CURLOPT_NOBODY);
	SDK::Define("CURLOPT_NOPROGRESS", CURLOPT_NOPROGRESS);
	SDK::Define("CURLOPT_NOPROXY", CURLOPT_NOPROXY);
	SDK::Define("CURLOPT_NOSIGNAL", CURLOPT_NOSIGNAL);
	SDK::Define("CURLOPT_OPENSOCKETDATA", CURLOPT_OPENSOCKETDATA);
	SDK::Define("CURLOPT_OPENSOCKETFUNCTION", CURLOPT_OPENSOCKETFUNCTION);
	SDK::Define("CURLOPT_PASSWORD", CURLOPT_PASSWORD);
	SDK::Define("CURLOPT_PATH_AS_IS", CURLOPT_PATH_AS_IS);
	SDK::Define("CURLOPT_PINNEDPUBLICKEY", CURLOPT_PINNEDPUBLICKEY);
	SDK::Define("CURLOPT_PIPEWAIT", CURLOPT_PIPEWAIT);
	SDK::Define("CURLOPT_PORT", CURLOPT_PORT);
	SDK::Define("CURLOPT_POST", CURLOPT_POST);
	SDK::Define("CURLOPT_POSTFIELDS", CURLOPT_POSTFIELDS);
	SDK::Define("CURLOPT_POSTFIELDSIZE", CURLOPT_POSTFIELDSIZE);
	SDK::Define("CURLOPT_POSTFIELDSIZE_LARGE", CURLOPT_POSTFIELDSIZE_LARGE);
	SDK::Define("CURLOPT_POSTQUOTE", CURLOPT_POSTQUOTE);
	SDK::Define("CURLOPT_POSTREDIR", CURLOPT_POSTREDIR);
	SDK::Define("CURLOPT_PREQUOTE", CURLOPT_PREQUOTE);
	SDK::Define("CURLOPT_PRE_PROXY", CURLOPT_PRE_PROXY);
	SDK::Define("CURLOPT_PRIVATE", CURLOPT_PRIVATE);
	SDK::Define("CURLOPT_PROGRESSDATA", CURLOPT_PROGRESSDATA);
	SDK::Define("CURLOPT_PROGRESSFUNCTION", CURLOPT_PROGRESSFUNCTION);
	SDK::Define("CURLOPT_PROTOCOLS", CURLOPT_PROTOCOLS);
	SDK::Define("CURLOPT_PROXY", CURLOPT_PROXY);
	SDK::Define("CURLOPT_PROXYAUTH", CURLOPT_PROXYAUTH);
	SDK::Define("CURLOPT_PROXYHEADER", CURLOPT_PROXYHEADER);
	SDK::Define("CURLOPT_PROXYPASSWORD", CURLOPT_PROXYPASSWORD);
	SDK::Define("CURLOPT_PROXYPORT", CURLOPT_PROXYPORT);
	SDK::Define("CURLOPT_PROXYTYPE", CURLOPT_PROXYTYPE);
	SDK::Define("CURLOPT_PROXYUSERNAME", CURLOPT_PROXYUSERNAME);
	SDK::Define("CURLOPT_PROXYUSERPWD", CURLOPT_PROXYUSERPWD);
	SDK::Define("CURLOPT_PROXY_CAINFO", CURLOPT_PROXY_CAINFO);
	SDK::Define("CURLOPT_PROXY_CAPATH", CURLOPT_PROXY_CAPATH);
	SDK::Define("CURLOPT_PROXY_CRLFILE", CURLOPT_PROXY_CRLFILE);
	SDK::Define("CURLOPT_PROXY_KEYPASSWD", CURLOPT_PROXY_KEYPASSWD);
	SDK::Define("CURLOPT_PROXY_PINNEDPUBLICKEY", CURLOPT_PROXY_PINNEDPUBLICKEY);
	SDK::Define("CURLOPT_PROXY_SERVICE_NAME", CURLOPT_PROXY_SERVICE_NAME);
	SDK::Define("CURLOPT_PROXY_SSLCERT", CURLOPT_PROXY_SSLCERT);
	SDK::Define("CURLOPT_PROXY_SSLCERTTYPE", CURLOPT_PROXY_SSLCERTTYPE);
	SDK::Define("CURLOPT_PROXY_SSLKEY", CURLOPT_PROXY_SSLKEY);
	SDK::Define("CURLOPT_PROXY_SSLKEYTYPE", CURLOPT_PROXY_SSLKEYTYPE);
	SDK::Define("CURLOPT_PROXY_SSLVERSION", CURLOPT_PROXY_SSLVERSION);
	SDK::Define("CURLOPT_PROXY_SSL_CIPHER_LIST", CURLOPT_PROXY_SSL_CIPHER_LIST);
	SDK::Define("CURLOPT_PROXY_SSL_OPTIONS", CURLOPT_PROXY_SSL_OPTIONS);
	SDK::Define("CURLOPT_PROXY_SSL_VERIFYHOST", CURLOPT_PROXY_SSL_VERIFYHOST);
	SDK::Define("CURLOPT_PROXY_SSL_VERIFYPEER", CURLOPT_PROXY_SSL_VERIFYPEER);
	SDK::Define("CURLOPT_PROXY_TLS13_CIPHERS", CURLOPT_PROXY_TLS13_CIPHERS);
	SDK::Define("CURLOPT_PROXY_TLSAUTH_PASSWORD", CURLOPT_PROXY_TLSAUTH_PASSWORD);
	SDK::Define("CURLOPT_PROXY_TLSAUTH_TYPE", CURLOPT_PROXY_TLSAUTH_TYPE);
	SDK::Define("CURLOPT_PROXY_TLSAUTH_USERNAME", CURLOPT_PROXY_TLSAUTH_USERNAME);
	SDK::Define("CURLOPT_PROXY_TRANSFER_MODE", CURLOPT_PROXY_TRANSFER_MODE);
	SDK::Define("CURLOPT_PUT", CURLOPT_PUT);
	SDK::Define("CURLOPT_QUOTE", CURLOPT_QUOTE);
	SDK::Define("CURLOPT_RANDOM_FILE", CURLOPT_RANDOM_FILE);
	SDK::Define("CURLOPT_RANGE", CURLOPT_RANGE);
	SDK::Define("CURLOPT_READDATA", CURLOPT_READDATA);
	SDK::Define("CURLOPT_READFUNCTION", CURLOPT_READFUNCTION);
	SDK::Define("CURLOPT_REDIR_PROTOCOLS", CURLOPT_REDIR_PROTOCOLS);
	SDK::Define("CURLOPT_REFERER", CURLOPT_REFERER);
	SDK::Define("CURLOPT_REQUEST_TARGET", CURLOPT_REQUEST_TARGET);
	SDK::Define("CURLOPT_RESOLVE", CURLOPT_RESOLVE);
	SDK::Define("CURLOPT_RESOLVER_START_DATA", CURLOPT_RESOLVER_START_DATA);
	SDK::Define("CURLOPT_RESOLVER_START_FUNCTION", CURLOPT_RESOLVER_START_FUNCTION);
	SDK::Define("CURLOPT_RESUME_FROM", CURLOPT_RESUME_FROM);
	SDK::Define("CURLOPT_RESUME_FROM_LARGE", CURLOPT_RESUME_FROM_LARGE);
	SDK::Define("CURLOPT_RTSP_CLIENT_CSEQ", CURLOPT_RTSP_CLIENT_CSEQ);
	SDK::Define("CURLOPT_RTSP_REQUEST", CURLOPT_RTSP_REQUEST);
	SDK::Define("CURLOPT_RTSP_SERVER_CSEQ", CURLOPT_RTSP_SERVER_CSEQ);
	SDK::Define("CURLOPT_RTSP_SESSION_ID", CURLOPT_RTSP_SESSION_ID);
	SDK::Define("CURLOPT_RTSP_STREAM_URI", CURLOPT_RTSP_STREAM_URI);
	SDK::Define("CURLOPT_RTSP_TRANSPORT", CURLOPT_RTSP_TRANSPORT);
	SDK::Define("CURLOPT_SASL_AUTHZID", CURLOPT_SASL_AUTHZID);
	SDK::Define("CURLOPT_SASL_IR", CURLOPT_SASL_IR);
	SDK::Define("CURLOPT_SEEKDATA", CURLOPT_SEEKDATA);
	SDK::Define("CURLOPT_SEEKFUNCTION", CURLOPT_SEEKFUNCTION);
	SDK::Define("CURLOPT_SERVICE_NAME", CURLOPT_SERVICE_NAME);
	SDK::Define("CURLOPT_SHARE", CURLOPT_SHARE);
	SDK::Define("CURLOPT_SOCKOPTDATA", CURLOPT_SOCKOPTDATA);
	SDK::Define("CURLOPT_SOCKOPTFUNCTION", CURLOPT_SOCKOPTFUNCTION);
	SDK::Define("CURLOPT_SOCKS5_AUTH", CURLOPT_SOCKS5_AUTH);
	SDK::Define("CURLOPT_SOCKS5_GSSAPI_NEC", CURLOPT_SOCKS5_GSSAPI_NEC);
	SDK::Define("CURLOPT_SOCKS5_GSSAPI_SERVICE", CURLOPT_SOCKS5_GSSAPI_SERVICE);
	SDK::Define("CURLOPT_SSH_AUTH_TYPES", CURLOPT_SSH_AUTH_TYPES);
	SDK::Define("CURLOPT_SSH_COMPRESSION", CURLOPT_SSH_COMPRESSION);
	SDK::Define("CURLOPT_SSH_HOST_PUBLIC_KEY_MD5", CURLOPT_SSH_HOST_PUBLIC_KEY_MD5);
	SDK::Define("CURLOPT_SSH_KEYDATA", CURLOPT_SSH_KEYDATA);
	SDK::Define("CURLOPT_SSH_KEYFUNCTION", CURLOPT_SSH_KEYFUNCTION);
	SDK::Define("CURLOPT_SSH_KNOWNHOSTS", CURLOPT_SSH_KNOWNHOSTS);
	SDK::Define("CURLOPT_SSH_PRIVATE_KEYFILE", CURLOPT_SSH_PRIVATE_KEYFILE);
	SDK::Define("CURLOPT_SSH_PUBLIC_KEYFILE", CURLOPT_SSH_PUBLIC_KEYFILE);
	SDK::Define("CURLOPT_SSLCERT", CURLOPT_SSLCERT);
	SDK::Define("CURLOPT_SSLCERTTYPE", CURLOPT_SSLCERTTYPE);
	SDK::Define("CURLOPT_SSLENGINE", CURLOPT_SSLENGINE);
	SDK::Define("CURLOPT_SSLENGINE_DEFAULT", CURLOPT_SSLENGINE_DEFAULT);
	SDK::Define("CURLOPT_SSLKEY", CURLOPT_SSLKEY);
	SDK::Define("CURLOPT_SSLKEYTYPE", CURLOPT_SSLKEYTYPE);
	SDK::Define("CURLOPT_SSLVERSION", CURLOPT_SSLVERSION);
	SDK::Define("CURLOPT_SSL_CIPHER_LIST", CURLOPT_SSL_CIPHER_LIST);
	SDK::Define("CURLOPT_SSL_CTX_DATA", CURLOPT_SSL_CTX_DATA);
	SDK::Define("CURLOPT_SSL_CTX_FUNCTION", CURLOPT_SSL_CTX_FUNCTION);
	SDK::Define("CURLOPT_SSL_ENABLE_ALPN", CURLOPT_SSL_ENABLE_ALPN);
	SDK::Define("CURLOPT_SSL_ENABLE_NPN", CURLOPT_SSL_ENABLE_NPN);
	SDK::Define("CURLOPT_SSL_FALSESTART", CURLOPT_SSL_FALSESTART);
	SDK::Define("CURLOPT_SSL_OPTIONS", CURLOPT_SSL_OPTIONS);
	SDK::Define("CURLOPT_SSL_SESSIONID_CACHE", CURLOPT_SSL_SESSIONID_CACHE);
	SDK::Define("CURLOPT_SSL_VERIFYHOST", CURLOPT_SSL_VERIFYHOST);
	SDK::Define("CURLOPT_SSL_VERIFYPEER", CURLOPT_SSL_VERIFYPEER);
	SDK::Define("CURLOPT_SSL_VERIFYSTATUS", CURLOPT_SSL_VERIFYSTATUS);
	SDK::Define("CURLOPT_STDERR", CURLOPT_STDERR);
	SDK::Define("CURLOPT_STREAM_DEPENDS", CURLOPT_STREAM_DEPENDS);
	SDK::Define("CURLOPT_STREAM_DEPENDS_E", CURLOPT_STREAM_DEPENDS_E);
	SDK::Define("CURLOPT_STREAM_WEIGHT", CURLOPT_STREAM_WEIGHT);
	SDK::Define("CURLOPT_SUPPRESS_CONNECT_HEADERS", CURLOPT_SUPPRESS_CONNECT_HEADERS);
	SDK::Define("CURLOPT_TCP_FASTOPEN", CURLOPT_TCP_FASTOPEN);
	SDK::Define("CURLOPT_TCP_KEEPALIVE", CURLOPT_TCP_KEEPALIVE);
	SDK::Define("CURLOPT_TCP_KEEPIDLE", CURLOPT_TCP_KEEPIDLE);
	SDK::Define("CURLOPT_TCP_KEEPINTVL", CURLOPT_TCP_KEEPINTVL);
	SDK::Define("CURLOPT_TCP_NODELAY", CURLOPT_TCP_NODELAY);
	SDK::Define("CURLOPT_TELNETOPTIONS", CURLOPT_TELNETOPTIONS);
	SDK::Define("CURLOPT_TFTP_BLKSIZE", CURLOPT_TFTP_BLKSIZE);
	SDK::Define("CURLOPT_TFTP_NO_OPTIONS", CURLOPT_TFTP_NO_OPTIONS);
	SDK::Define("CURLOPT_TIMECONDITION", CURLOPT_TIMECONDITION);
	SDK::Define("CURLOPT_TIMEOUT", CURLOPT_TIMEOUT);
	SDK::Define("CURLOPT_TIMEOUT_MS", CURLOPT_TIMEOUT_MS);
	SDK::Define("CURLOPT_TIMEVALUE", CURLOPT_TIMEVALUE);
	SDK::Define("CURLOPT_TIMEVALUE_LARGE", CURLOPT_TIMEVALUE_LARGE);
	SDK::Define("CURLOPT_TLS13_CIPHERS", CURLOPT_TLS13_CIPHERS);
	SDK::Define("CURLOPT_TLSAUTH_PASSWORD", CURLOPT_TLSAUTH_PASSWORD);
	SDK::Define("CURLOPT_TLSAUTH_TYPE", CURLOPT_TLSAUTH_TYPE);
	SDK::Define("CURLOPT_TLSAUTH_USERNAME", CURLOPT_TLSAUTH_USERNAME);
	SDK::Define("CURLOPT_TRAILERDATA", CURLOPT_TRAILERDATA);
	SDK::Define("CURLOPT_TRAILERFUNCTION", CURLOPT_TRAILERFUNCTION);
	SDK::Define("CURLOPT_TRANSFERTEXT", CURLOPT_TRANSFERTEXT);
	SDK::Define("CURLOPT_TRANSFER_ENCODING", CURLOPT_TRANSFER_ENCODING);
	SDK::Define("CURLOPT_UNIX_SOCKET_PATH", CURLOPT_UNIX_SOCKET_PATH);
	SDK::Define("CURLOPT_UNRESTRICTED_AUTH", CURLOPT_UNRESTRICTED_AUTH);
	SDK::Define("CURLOPT_UPKEEP_INTERVAL_MS", CURLOPT_UPKEEP_INTERVAL_MS);
	SDK::Define("CURLOPT_UPLOAD", CURLOPT_UPLOAD);
	SDK::Define("CURLOPT_UPLOAD_BUFFERSIZE", CURLOPT_UPLOAD_BUFFERSIZE);
	SDK::Define("CURLOPT_URL", CURLOPT_URL);
	SDK::Define("CURLOPT_USERAGENT", CURLOPT_USERAGENT);
	SDK::Define("CURLOPT_USERNAME", CURLOPT_USERNAME);
	SDK::Define("CURLOPT_USERPWD", CURLOPT_USERPWD);
	SDK::Define("CURLOPT_USE_SSL", CURLOPT_USE_SSL);
	SDK::Define("CURLOPT_VERBOSE", CURLOPT_VERBOSE);
	SDK::Define("CURLOPT_WILDCARDMATCH", CURLOPT_WILDCARDMATCH);
	SDK::Define("CURLOPT_WRITEDATA", CURLOPT_WRITEDATA);
	SDK::Define("CURLOPT_WRITEFUNCTION", CURLOPT_WRITEFUNCTION);
	SDK::Define("CURLOPT_XFERINFODATA", CURLOPT_XFERINFODATA);
	SDK::Define("CURLOPT_XFERINFOFUNCTION", CURLOPT_XFERINFOFUNCTION);
	SDK::Define("CURLOPT_XOAUTH2_BEARER", CURLOPT_XOAUTH2_BEARER);	
}

void ModuleUnregister()
{
}

/*
int iOptID;
State.CheckNumber(0, iOptID);

if(iOptID == 1 || iOptID == 2)
    const char* szValue = State.CheckString(1);
else
    int iValue = State.CheckInteger(1);
*/

// For Reference
	//curl_easy_setopt(handle, CURLOPT_URL, szURL);
	//curl_easy_setopt(handle, CURLOPT_POST, szURL);
	//size_t write_data(void *buffer, size_t size, size_t nmemb, void *userp); 
	//curl_easy_setopt(easyhandle, CURLOPT_WRITEFUNCTION, write_data); 
	//curl_easy_setopt(easyhandle, CURLOPT_WRITEDATA, &internal_struct); 
	//success = curl_easy_perform(easyhandle); 	